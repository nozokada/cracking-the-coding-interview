maze_1 = [
    ['#', '#', 'S', '#', '#', '#', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '#', '#', '#', '.'],
    ['.', '#', '#', '#', '#', '#', '#', '.', '#', '.', '.'],
    ['.', '#', '.', '.', '.', '.', '.', '.', '#', '.', '#'],
    ['.', '#', '.', '#', '.', '#', '#', '#', '#', '.', '#'],
    ['.', '.', '.', '#', '.', '#', '.', '.', '.', '.', '.'],
    ['.', '#', '.', '#', '.', '#', '.', '#', '#', '#', '#'],
    ['.', '#', '.', '.', '#', '#', '.', '#', '.', '.', '.'],
    ['#', '#', '#', '.', '.', '#', '.', '.', '.', '#', '.'],
    ['.', '.', '.', '#', '.', '#', '.', '#', '.', '#', '.'],
    ['.', '#', '.', '#', '#', '#', '.', '#', '.', '#', '.'],
    ['.', '#', '.', '.', '.', '.', '.', '#', '#', '#', '#'],
    ['.', '#', '.', '#', '#', '#', '#', '.', '.', '.', '#'],
    ['.', '#', '.', '.', '.', '.', '#', '.', '#', '.', '#'],
    ['.', '#', '#', '#', '#', '#', '#', '.', '#', '.', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#'],
    ['.', '#', '#', '#', '#', '#', '#', '#', '.', 'G', '#'],
]

maze_2 = [
    ['.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.'],
    ['.', '#', '.', '#', '#', '#', '.', '#', '#', '.', '#', '#', '#', '.'],
    ['.', '#', '.', '#', '.', '.', '.', '.', '#', '.', '#', '.', '#', '.'],
    ['#', '#', '.', '#', '.', '.', '.', '.', '#', '.', '#', '.', '#', '.'],
    ['.', '.', '.', '#', '#', '#', '#', '#', '#', '.', '#', '.', '#', '.'],
    ['.', '#', '#', '#', '.', '.', '.', '.', '#', '.', '#', '.', '.', '.'],
    ['.', '.', '.', '#', '.', 'S', '.', '.', '#', '.', '#', '.', '#', '#'],
    ['#', '#', '.', '#', '.', '.', '.', '.', '#', '.', '#', '.', '.', 'G'],
    ['.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '#', '#', '#'],
    ['.', '#', '.', '#', '#', '#', '#', '#', '#', '.', '#', '.', '.', '#'],
    ['.', '#', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.', '#'],
    ['.', '#', '.', '.', '#', '.', '.', '.', '#', '.', '#', '.', '.', '#'],
    ['.', '#', '.', '.', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#'],
    ['.', '#', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.'],
    ['.', '#', '.', '.', '.', '.', '.', '.', '#', '#', '#', '#', '#', '.'],
    ['.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
]


def find_shortest_distance(maze):
    for i in range(len(maze)):
        for j in range(len(maze[i])):
            if maze[i][j] == 'S':
                return start_maze(maze, i, j)


def start_maze(maze, start_row, start_col):
    visited = [[False for _ in range(len(row))] for row in maze]
    visited[start_row][start_col] = True
    queue = [(start_row, start_col, 0)]
    while queue:
        n = queue.pop(0)
        row = n[0]
        col = n[1]
        distance = n[2]

        for r, c in ((row + 1, col), (row - 1, col), (row, col + 1), (row, col - 1)):
            if r < 0 or r >= len(maze) or c < 0 or c >= len(maze[r]):
                continue
            if visited[r][c]:
                continue
            if maze[r][c] == '#':
                continue
            if maze[r][c] == 'G':
                return distance + 1
            visited[r][c] = True
            queue.append((r, c, distance + 1))


print(find_shortest_distance(maze_2))
